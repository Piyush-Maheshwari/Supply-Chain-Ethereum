// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
// const web3 = require('web3');
const SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    let sku = 1
    let upc = 1
    let ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    let productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    // const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    const verifyFirstResultSet= (resultBuffer) => {
        // console.log("****************** " +  resultBuffer[0])
        assert.equal(resultBuffer[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBuffer[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBuffer[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBuffer[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBuffer[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBuffer[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBuffer[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBuffer[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    };
    
    const verifyInitialSecondResultSet = (resultBuffer) => {
        assert.equal(resultBuffer[0].toNumber(), sku, 'Error: Invalid item SKU')
        assert.equal(resultBuffer[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBuffer[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBuffer[3], productNotes, 'Error: Missing or Invalid productNotes')
        
    };
    const verifyPartialSecondResultSet = (resultBuffer) => {
        verifyInitialSecondResultSet(resultBuffer);        
        assert.equal(resultBuffer[4], productPrice, 'Error: Missing or Invalid productPrice')
    };

    const verifySecondResultSet= (resultBuffer) => {
        verifyPartialSecondResultSet(resultBuffer);
        assert.equal(resultBuffer[5], 7, 'Error: Missing or Invalid itemState')
        assert.equal(resultBuffer[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBuffer[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(resultBuffer[8], consumerID, 'Error: Missing or Invalid consumerID')

    }

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.harvestItem(upc, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from : originFarmerID})
        
        const events= await supplyChain.getPastEvents('Harvested', {filter: {upc} });
        ownerID = originFarmerID;
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifyInitialSecondResultSet(resultBufferTwo);
        assert.equal(await supplyChain.isFarmer(originFarmerID), true, 'Error: The account is not Farmer')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal((events.length > 0) , true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Watch the emitted event Processed()
        
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: originFarmerID});
        
        const events= await supplyChain.getPastEvents('Processed', {filter: {upc} });
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifyInitialSecondResultSet(resultBufferTwo);
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal((events.length > 0) , true, 'Invalid event emitted');
                
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Mark an item as Processed by calling function packItem()
        await supplyChain.packItem(upc, {from : originFarmerID})
        
        // Watch the emitted event Packed()
        const events= await supplyChain.getPastEvents('Packed', {filter: {upc} });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifyInitialSecondResultSet(resultBufferTwo);
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal((events.length > 0) , true, 'Invalid event emitted');
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
            
        // Mark an item as Processed by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID});
    
        // Watch the emitted event ForSale()
        const events= await supplyChain.getPastEvents('ForSale', {filter: {upc} });
    
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifyPartialSecondResultSet(resultBufferTwo);
        
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal((events.length > 0) , true, 'Invalid event emitted');
          
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Mark an item as Processed by calling function buyItem()
        await supplyChain.addDistributor(distributorID);
        await supplyChain.buyItem(upc, {from: distributorID, value: productPrice});
        
        // Watch the emitted event Sold()
        const events= await supplyChain.getPastEvents('Sold', {filter: {upc} });
        ownerID = distributorID;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifyPartialSecondResultSet(resultBufferTwo);
        assert.equal(await supplyChain.isDistributor(distributorID), true, 'Error: The account is not distributor')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item State')
        assert.equal((events.length > 0) , true, 'Invalid event emitted');
        
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Mark an item as Processed by calling function shipItem()
        await supplyChain.shipItem(upc, {from: distributorID});

        // Watch the emitted event Shipped()
        const events= await supplyChain.getPastEvents('Shipped', {filter: {upc} });
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifyPartialSecondResultSet(resultBufferTwo);
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item State')
        assert.equal((events.length > 0) , true, 'Invalid event emitted');
              
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed();
            
        // Mark an item as Processed by calling function receiveItem()
        await supplyChain.addRetailer(retailerID);
        await supplyChain.receiveItem(upc, {from :  retailerID});

        // Watch the emitted event Received()
        const events= await supplyChain.getPastEvents('Received', {filter: {upc} });
        ownerID= retailerID;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifyPartialSecondResultSet(resultBufferTwo);

        assert.equal(await supplyChain.isRetailer(retailerID), true, 'Error: The account is not Retailer')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item State')
        assert.equal((events.length > 0) , true, 'Invalid event emitted');
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        
        // Mark an item as Processed by calling function purchaseItem()
        await supplyChain.addConsumer(consumerID);
        await supplyChain.purchaseItem(upc, {from : consumerID});

        // Watch the emitted event Purchased()
        const events= await supplyChain.getPastEvents('Purchased', {filter: {upc} });
        ownerID= consumerID;

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        verifyFirstResultSet(resultBufferOne);
        verifySecondResultSet(resultBufferTwo);
        assert.equal(await supplyChain.isPurchased(upc), true, 'Error: The Purchase was not done')
        assert.equal(await supplyChain.isConsumer(consumerID), true, 'Error: The account is not Consumer')
        assert.equal((events.length > 0) , true, 'Invalid event emitted');
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        
        // Verify the result set:
        verifyFirstResultSet(resultBufferOne);
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set:
        verifySecondResultSet(resultBufferTwo);
    })

    // 1`th Test
    it("Should Remove the Farmer from the contract", async() => {
        const supplyChain = await SupplyChain.deployed()

        //  Remove the farmer from the list
        await supplyChain.renounceFarmer({from : originFarmerID});
        
        // Verify the renounceFarmer operation:
        assert.equal(await supplyChain.isFarmer(originFarmerID), false, 'Error: The Farmer is not removed')
        
    })

    // 12th Test
    it("Should Remove the Distributor from the contract ", async() => {
        const supplyChain = await SupplyChain.deployed()

        //  Remove the Distributor from the list
        await supplyChain.renounceDistributor({from : distributorID});

        // Verify the renounceDistributor operation:
        assert.equal(await supplyChain.isDistributor(distributorID), false, 'Error: The distributor is not removed')
        
    })

    // 13th Test
    it("Should Remove the Retailer from the contract ", async() => {
        const supplyChain = await SupplyChain.deployed()

        //  Remove the Retailer from the list
        await supplyChain.renounceRetailer({from : retailerID});

        // Verify the renounceRetailer operation:
        assert.equal(await supplyChain.isRetailer(retailerID), false, 'Error: The Retailer is not removed')
        
    })

    // 15th Test
    it("Should Remove the Consumer from the contract ", async() => {
        const supplyChain = await SupplyChain.deployed()

        //  Remove the Consumer from the list
        await supplyChain.renounceConsumer({from : consumerID});

        // Verify the renounceConsumer operation:
        assert.equal(await supplyChain.isConsumer(consumerID), false, 'Error: The Consumer is not removed')
        
    })
    // 15th Test
    it("Should Kill the contract ", async() => {
        const supplyChain = await SupplyChain.deployed()

        //  Remove the farmer from the list
        await supplyChain.kill();

        // Verify the renounceConsumer operation:
        assert.equal(await web3.eth.getCode(supplyChain.address), '0x', 'Error: ByteCode')
        
    })

});

